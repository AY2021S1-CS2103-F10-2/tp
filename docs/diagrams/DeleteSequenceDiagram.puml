@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":DeleteCommandParser" as DeleteCommandParser LOGIC_COLOR
participant ":ArgumentTokenizer" as ArgumentTokenizer LOGIC_COLOR
participant "argMultimap:ArgumentMultimap" as ArgumentMultimap LOGIC_COLOR
participant ":ParserUtil" as ParserUtil LOGIC_COLOR
participant ":NameContainsKeywordsPredicate" as NameContainsKeywordsPredicate LOGIC_COLOR
participant "d:DeleteCommand" as DeleteCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("contact delete n/Alex Yeoh")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("contact delete n/Alex Yeoh")
activate AddressBookParser

create DeleteCommandParser
AddressBookParser -> DeleteCommandParser : DeleteCommandParser()
activate DeleteCommandParser

DeleteCommandParser --> AddressBookParser
deactivate DeleteCommandParser

AddressBookParser -> DeleteCommandParser : parse(" n/Alex Yeoh")
activate DeleteCommandParser

DeleteCommandParser -> ArgumentTokenizer : tokenize(args, PREFIX_TAG)
activate ArgumentTokenizer

create ArgumentMultimap
ArgumentTokenizer -> ArgumentMultimap : ArgumentMultimap()
activate ArgumentMultimap

ArgumentMultimap --> ArgumentTokenizer : argMultimap
deactivate ArgumentMultimap

ArgumentTokenizer --> DeleteCommandParser : argMultimap
deactivate ArgumentTokenizer

DeleteCommandParser -> ArgumentMultimap : getAllValues(PREFIX_NAME)
activate ArgumentMultimap

ArgumentMultimap -> DeleteCommandParser : names
deactivate ArgumentMultimap

DeleteCommandParser -> ParserUtil : parseAllNames(names)
activate ParserUtil

ParserUtil --> DeleteCommandParser : nameSet
deactivate ParserUtil

create NameContainsKeywordsPredicate
DeleteCommandParser -> NameContainsKeywordsPredicate
activate NameContainsKeywordsPredicate

NameContainsKeywordsPredicate --> DeleteCommandParser : predicate
deactivate NameContainsKeywordsPredicate

create DeleteCommand
DeleteCommandParser -> DeleteCommand
activate DeleteCommand

DeleteCommand --> DeleteCommandParser : d
deactivate DeleteCommand

DeleteCommandParser --> AddressBookParser : d
destroy DeleteCommandParser

AddressBookParser --> LogicManager : d
deactivate AddressBookParser

LogicManager -> DeleteCommand : execute()
activate DeleteCommand

DeleteCommand -> Model : getUpdatedFilteredPersonList(predicate)
activate Model

Model --> DeleteCommand : people
deactivate Model

loop for p in people
DeleteCommand -> Model : deletePerson(p)
activate Model

Model --> DeleteCommand
deactivate Model

DeleteCommand -> Model : updatePersonInMeetingBook(p)
activate Model

Model --> DeleteCommand
deactivate Model

DeleteCommand -> Model : updatePersonInModuleBook(p)
activate Model

Model --> DeleteCommand
deactivate Model
end

create CommandResult
DeleteCommand -> CommandResult
activate CommandResult

CommandResult --> DeleteCommand
deactivate CommandResult

DeleteCommand --> LogicManager : result
destroy DeleteCommand

[<--LogicManager
deactivate LogicManager
@enduml
